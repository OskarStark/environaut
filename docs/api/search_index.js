var search_data = {
    'index': {
        'searchIndex': ["environaut","environaut\\cache","environaut\\checks","environaut\\command","environaut\\config","environaut\\config\\reader","environaut\\config\\reader\\dom","environaut\\export","environaut\\export\\formatter","environaut\\report","environaut\\report\\results","environaut\\report\\results\\messages","environaut\\report\\results\\settings","environaut\\runner","environaut\\application","environaut\\cache\\cache","environaut\\cache\\icache","environaut\\cache\\ireadonlycache","environaut\\cache\\readonlycache","environaut\\checks\\check","environaut\\checks\\composersecuritycheck","environaut\\checks\\configurator","environaut\\checks\\executablecheck","environaut\\checks\\icheck","environaut\\checks\\inestablecheck","environaut\\checks\\mbinternalencodingcheck","environaut\\checks\\phpextensioncheck","environaut\\checks\\phpsettingcheck","environaut\\checks\\validator","environaut\\command\\aboutcommand","environaut\\command\\checkcommand","environaut\\command\\command","environaut\\config\\baseconfighandler","environaut\\config\\config","environaut\\config\\confighandler","environaut\\config\\iconfig","environaut\\config\\iconfighandler","environaut\\config\\parameters","environaut\\config\\reader\\dom\\domattribute","environaut\\config\\reader\\dom\\domdocument","environaut\\config\\reader\\dom\\domelement","environaut\\config\\reader\\iconfigreader","environaut\\config\\reader\\jsonconfigreader","environaut\\config\\reader\\phpconfigreader","environaut\\config\\reader\\xmlconfigreader","environaut\\export\\export","environaut\\export\\formatter\\baseformatter","environaut\\export\\formatter\\consolemessageformatter","environaut\\export\\formatter\\ireportformatter","environaut\\export\\formatter\\jsonsettingswriter","environaut\\export\\formatter\\phpsettingswriter","environaut\\export\\formatter\\plaintextsettingswriter","environaut\\export\\formatter\\shellsettingswriter","environaut\\export\\formatter\\xmlsettingswriter","environaut\\export\\iexport","environaut\\pharcompiler","environaut\\report\\ireport","environaut\\report\\report","environaut\\report\\results\\iresult","environaut\\report\\results\\messages\\imessage","environaut\\report\\results\\messages\\message","environaut\\report\\results\\result","environaut\\report\\results\\settings\\isetting","environaut\\report\\results\\settings\\setting","environaut\\runner\\irunner","environaut\\runner\\runner","environaut\\application::__construct","environaut\\application::dorun","environaut\\cache\\cache::add","environaut\\cache\\cache::addall","environaut\\cache\\cache::save","environaut\\cache\\cache::setlocation","environaut\\cache\\icache::add","environaut\\cache\\icache::addall","environaut\\cache\\icache::save","environaut\\cache\\ireadonlycache::setlocation","environaut\\cache\\ireadonlycache::getlocation","environaut\\cache\\ireadonlycache::setparameters","environaut\\cache\\ireadonlycache::load","environaut\\cache\\ireadonlycache::get","environaut\\cache\\ireadonlycache::has","environaut\\cache\\ireadonlycache::getall","environaut\\cache\\readonlycache::__construct","environaut\\cache\\readonlycache::has","environaut\\cache\\readonlycache::get","environaut\\cache\\readonlycache::getall","environaut\\cache\\readonlycache::load","environaut\\cache\\readonlycache::setlocation","environaut\\cache\\readonlycache::getlocation","environaut\\cache\\readonlycache::setparameters","environaut\\checks\\check::__construct","environaut\\checks\\check::getresult","environaut\\checks\\check::setname","environaut\\checks\\check::getname","environaut\\checks\\check::setgroup","environaut\\checks\\check::getgroup","environaut\\checks\\check::setparameters","environaut\\checks\\check::getparameters","environaut\\checks\\check::setcache","environaut\\checks\\check::getdependencies","environaut\\checks\\check::getdefaultgroupname","environaut\\checks\\check::getdefaultsettinggroupname","environaut\\checks\\check::getdialoghelper","environaut\\checks\\check::getoutputstream","environaut\\checks\\check::setcommand","environaut\\checks\\check::getcommand","environaut\\checks\\check::getrandomstring","environaut\\checks\\composersecuritycheck::getdefaultgroupname","environaut\\checks\\composersecuritycheck::run","environaut\\checks\\configurator::getdefaultgroupname","environaut\\checks\\configurator::getdefaultsettinggroupname","environaut\\checks\\configurator::run","environaut\\checks\\executablecheck::getdefaultgroupname","environaut\\checks\\executablecheck::getdefaultsettinggroupname","environaut\\checks\\executablecheck::run","environaut\\checks\\executablecheck::validexecutable","environaut\\checks\\icheck::getname","environaut\\checks\\icheck::setname","environaut\\checks\\icheck::getgroup","environaut\\checks\\icheck::setgroup","environaut\\checks\\icheck::getparameters","environaut\\checks\\icheck::setparameters","environaut\\checks\\icheck::getdefaultgroupname","environaut\\checks\\icheck::getdefaultsettinggroupname","environaut\\checks\\icheck::run","environaut\\checks\\icheck::getresult","environaut\\checks\\icheck::getdependencies","environaut\\checks\\inestablecheck::addchild","environaut\\checks\\inestablecheck::getchild","environaut\\checks\\inestablecheck::getchildren","environaut\\checks\\mbinternalencodingcheck::getdefaultgroupname","environaut\\checks\\mbinternalencodingcheck::run","environaut\\checks\\phpextensioncheck::getdefaultgroupname","environaut\\checks\\phpextensioncheck::run","environaut\\checks\\phpsettingcheck::getdefaultgroupname","environaut\\checks\\phpsettingcheck::run","environaut\\checks\\phpsettingcheck::getsupportedcomparisons","environaut\\checks\\phpsettingcheck::compareintegers","environaut\\checks\\phpsettingcheck::getoperator","environaut\\checks\\phpsettingcheck::getintegervalue","environaut\\checks\\validator::readabledirectory","environaut\\checks\\validator::writabledirectory","environaut\\checks\\validator::writablefile","environaut\\checks\\validator::readablefile","environaut\\checks\\validator::validurl","environaut\\checks\\validator::validemail","environaut\\checks\\validator::validip","environaut\\checks\\validator::validipv4","environaut\\checks\\validator::validipv4notreserved","environaut\\checks\\validator::validipv6","environaut\\checks\\validator::fixrelativepath","environaut\\checks\\validator::fixpath","environaut\\command\\checkcommand::getconfighandler","environaut\\command\\checkcommand::getconfigpath","environaut\\command\\command::getoutput","environaut\\command\\command::getinput","environaut\\command\\command::getdialoghelper","environaut\\config\\baseconfighandler::__construct","environaut\\config\\baseconfighandler::getconfig","environaut\\config\\baseconfighandler::addlocation","environaut\\config\\baseconfighandler::setlocations","environaut\\config\\baseconfighandler::getlocations","environaut\\config\\config::__construct","environaut\\config\\config::getcheckdefinitions","environaut\\config\\config::getexportimplementor","environaut\\config\\config::getreportimplementor","environaut\\config\\config::getrunnerimplementor","environaut\\config\\config::getreadonlycacheimplementor","environaut\\config\\config::getcacheimplementor","environaut\\config\\config::get","environaut\\config\\config::has","environaut\\config\\config::set","environaut\\config\\config::toarray","environaut\\config\\iconfig::getcheckdefinitions","environaut\\config\\iconfig::getexportimplementor","environaut\\config\\iconfig::getreportimplementor","environaut\\config\\iconfig::getrunnerimplementor","environaut\\config\\iconfig::getreadonlycacheimplementor","environaut\\config\\iconfig::getcacheimplementor","environaut\\config\\iconfig::get","environaut\\config\\iconfig::has","environaut\\config\\iconfig::set","environaut\\config\\iconfig::toarray","environaut\\config\\iconfighandler::getconfig","environaut\\config\\iconfighandler::addlocation","environaut\\config\\iconfighandler::setlocations","environaut\\config\\iconfighandler::getlocations","environaut\\config\\parameters::__construct","environaut\\config\\parameters::get","environaut\\config\\parameters::set","environaut\\config\\parameters::has","environaut\\config\\parameters::getkeys","environaut\\config\\parameters::toarray","environaut\\config\\parameters::clear","environaut\\config\\reader\\dom\\domattribute::__tostring","environaut\\config\\reader\\dom\\domattribute::getvalue","environaut\\config\\reader\\dom\\domdocument::__construct","environaut\\config\\reader\\dom\\domdocument::load","environaut\\config\\reader\\dom\\domdocument::loadxml","environaut\\config\\reader\\dom\\domdocument::schemavalidate","environaut\\config\\reader\\dom\\domdocument::schemavalidatesource","environaut\\config\\reader\\dom\\domdocument::xinclude","environaut\\config\\reader\\dom\\domdocument::getxpath","environaut\\config\\reader\\dom\\domdocument::getelementvalue","environaut\\config\\reader\\dom\\domdocument::getelement","environaut\\config\\reader\\dom\\domdocument::setdefaultnamespace","environaut\\config\\reader\\dom\\domdocument::getdefaultnamespaceuri","environaut\\config\\reader\\dom\\domdocument::getdefaultnamespaceprefix","environaut\\config\\reader\\dom\\domdocument::isenvironautdocument","environaut\\config\\reader\\dom\\domdocument::registerenvironautnamespace","environaut\\config\\reader\\dom\\domdocument::isenvironautconfigurationdocument","environaut\\config\\reader\\dom\\domelement::__tostring","environaut\\config\\reader\\dom\\domelement::getname","environaut\\config\\reader\\dom\\domelement::getvalue","environaut\\config\\reader\\dom\\domelement::getiterator","environaut\\config\\reader\\dom\\domelement::getchildnodes","environaut\\config\\reader\\dom\\domelement::getattributevalue","environaut\\config\\reader\\dom\\domelement::getattributes","environaut\\config\\reader\\dom\\domelement::get","environaut\\config\\reader\\dom\\domelement::has","environaut\\config\\reader\\dom\\domelement::haschild","environaut\\config\\reader\\dom\\domelement::getchild","environaut\\config\\reader\\dom\\domelement::haschildren","environaut\\config\\reader\\dom\\domelement::countchildren","environaut\\config\\reader\\dom\\domelement::getchildren","environaut\\config\\reader\\dom\\domelement::hasparameters","environaut\\config\\reader\\dom\\domelement::getparameters","environaut\\config\\reader\\dom\\domelement::literalize","environaut\\config\\reader\\iconfigreader::getconfigdata","environaut\\config\\reader\\jsonconfigreader::getconfigdata","environaut\\config\\reader\\phpconfigreader::getconfigdata","environaut\\config\\reader\\xmlconfigreader::getconfigdata","environaut\\config\\reader\\xmlconfigreader::getdocument","environaut\\export\\export::run","environaut\\export\\export::setreport","environaut\\export\\export::setcommand","environaut\\export\\export::setparameters","environaut\\export\\formatter\\baseformatter::__construct","environaut\\export\\formatter\\baseformatter::setparameters","environaut\\export\\formatter\\baseformatter::getparameters","environaut\\export\\formatter\\baseformatter::vksprintf","environaut\\export\\formatter\\consolemessageformatter::format","environaut\\export\\formatter\\ireportformatter::format","environaut\\export\\formatter\\ireportformatter::setparameters","environaut\\export\\formatter\\jsonsettingswriter::format","environaut\\export\\formatter\\phpsettingswriter::format","environaut\\export\\formatter\\plaintextsettingswriter::format","environaut\\export\\formatter\\shellsettingswriter::format","environaut\\export\\formatter\\xmlsettingswriter::format","environaut\\export\\iexport::setreport","environaut\\export\\iexport::setcommand","environaut\\export\\iexport::setparameters","environaut\\export\\iexport::run","environaut\\pharcompiler::create","environaut\\report\\ireport::addresult","environaut\\report\\ireport::setparameters","environaut\\report\\ireport::setresults","environaut\\report\\ireport::getresults","environaut\\report\\ireport::getsettings","environaut\\report\\ireport::getsettingsasarray","environaut\\report\\ireport::getcachablesettings","environaut\\report\\ireport::getcachablesettingsasarray","environaut\\report\\report::__construct","environaut\\report\\report::addresult","environaut\\report\\report::setresults","environaut\\report\\report::getresults","environaut\\report\\report::getsettings","environaut\\report\\report::getcachablesettings","environaut\\report\\report::getsettingsasarray","environaut\\report\\report::getcachablesettingsasarray","environaut\\report\\report::setparameters","environaut\\report\\results\\iresult::addmessage","environaut\\report\\results\\iresult::getmessages","environaut\\report\\results\\iresult::setmessages","environaut\\report\\results\\iresult::addsetting","environaut\\report\\results\\iresult::addsettings","environaut\\report\\results\\iresult::getsettings","environaut\\report\\results\\iresult::getcachablesettings","environaut\\report\\results\\iresult::getsettingsasarray","environaut\\report\\results\\iresult::getcachablesettingsasarray","environaut\\report\\results\\iresult::setstatus","environaut\\report\\results\\iresult::getstatus","environaut\\report\\results\\iresult::setcheck","environaut\\report\\results\\iresult::getcheck","environaut\\report\\results\\messages\\imessage::getgroup","environaut\\report\\results\\messages\\imessage::getname","environaut\\report\\results\\messages\\imessage::getseverity","environaut\\report\\results\\messages\\imessage::gettext","environaut\\report\\results\\messages\\message::__construct","environaut\\report\\results\\messages\\message::getgroup","environaut\\report\\results\\messages\\message::setgroup","environaut\\report\\results\\messages\\message::getname","environaut\\report\\results\\messages\\message::setname","environaut\\report\\results\\messages\\message::gettext","environaut\\report\\results\\messages\\message::settext","environaut\\report\\results\\messages\\message::getseverity","environaut\\report\\results\\messages\\message::setseverity","environaut\\report\\results\\messages\\message::toarray","environaut\\report\\results\\result::__construct","environaut\\report\\results\\result::addmessage","environaut\\report\\results\\result::addsetting","environaut\\report\\results\\result::addsettings","environaut\\report\\results\\result::setmessages","environaut\\report\\results\\result::getmessages","environaut\\report\\results\\result::getsettings","environaut\\report\\results\\result::getcachablesettings","environaut\\report\\results\\result::getsettingsasarray","environaut\\report\\results\\result::getcachablesettingsasarray","environaut\\report\\results\\result::setstatus","environaut\\report\\results\\result::getstatus","environaut\\report\\results\\result::setcheck","environaut\\report\\results\\result::getcheck","environaut\\report\\results\\settings\\isetting::getname","environaut\\report\\results\\settings\\isetting::getvalue","environaut\\report\\results\\settings\\isetting::getgroup","environaut\\report\\results\\settings\\isetting::toarray","environaut\\report\\results\\settings\\setting::__construct","environaut\\report\\results\\settings\\setting::getname","environaut\\report\\results\\settings\\setting::getvalue","environaut\\report\\results\\settings\\setting::getgroup","environaut\\report\\results\\settings\\setting::getflag","environaut\\report\\results\\settings\\setting::matchesflag","environaut\\report\\results\\settings\\setting::matchesgroup","environaut\\report\\results\\settings\\setting::toarray","environaut\\report\\results\\settings\\setting::getgroupnames","environaut\\runner\\irunner::setcache","environaut\\runner\\irunner::setconfig","environaut\\runner\\irunner::setcommand","environaut\\runner\\irunner::setparameters","environaut\\runner\\irunner::run","environaut\\runner\\irunner::getreport","environaut\\runner\\runner::__construct","environaut\\runner\\runner::run","environaut\\runner\\runner::getreport","environaut\\runner\\runner::setparameters","environaut\\runner\\runner::setconfig","environaut\\runner\\runner::setcache","environaut\\runner\\runner::setcommand"],
        'info': [["Environaut","","Environaut.html","","",3],["Environaut\\Cache","","Environaut\/Cache.html","","",3],["Environaut\\Checks","","Environaut\/Checks.html","","",3],["Environaut\\Command","","Environaut\/Command.html","","",3],["Environaut\\Config","","Environaut\/Config.html","","",3],["Environaut\\Config\\Reader","","Environaut\/Config\/Reader.html","","",3],["Environaut\\Config\\Reader\\Dom","","Environaut\/Config\/Reader\/Dom.html","","",3],["Environaut\\Export","","Environaut\/Export.html","","",3],["Environaut\\Export\\Formatter","","Environaut\/Export\/Formatter.html","","",3],["Environaut\\Report","","Environaut\/Report.html","","",3],["Environaut\\Report\\Results","","Environaut\/Report\/Results.html","","",3],["Environaut\\Report\\Results\\Messages","","Environaut\/Report\/Results\/Messages.html","","",3],["Environaut\\Report\\Results\\Settings","","Environaut\/Report\/Results\/Settings.html","","",3],["Environaut\\Runner","","Environaut\/Runner.html","","",3],["Application","Environaut","Environaut\/Application.html"," < Application","The console application that handles all supported",1],["Cache","Environaut\\Cache","Environaut\/Cache\/Cache.html"," < ReadOnlyCache","",1],["ICache","Environaut\\Cache","Environaut\/Cache\/ICache.html","","",1],["IReadOnlyCache","Environaut\\Cache","Environaut\/Cache\/IReadOnlyCache.html","","",1],["ReadOnlyCache","Environaut\\Cache","Environaut\/Cache\/ReadOnlyCache.html","","",1],["Check","Environaut\\Checks","Environaut\/Checks\/Check.html","","Class that custom Checks may extend to get access to",1],["ComposerSecurityCheck","Environaut\\Checks","Environaut\/Checks\/ComposerSecurityCheck.html"," < Check","The SensioLabs Security Checker is a command line tool",1],["Configurator","Environaut\\Checks","Environaut\/Checks\/Configurator.html"," < Check","Basic check to ask the user for environment configuration",1],["ExecutableCheck","Environaut\\Checks","Environaut\/Checks\/ExecutableCheck.html"," < Check","Check to get absolute paths to executable files that",1],["ICheck","Environaut\\Checks","Environaut\/Checks\/ICheck.html","","Interface all checks must implement.",1],["INestableCheck","Environaut\\Checks","Environaut\/Checks\/INestableCheck.html","","",1],["MbInternalEncodingCheck","Environaut\\Checks","Environaut\/Checks\/MbInternalEncodingCheck.html"," < Check","Checks that mbstring extension is present and uses",1],["PhpExtensionCheck","Environaut\\Checks","Environaut\/Checks\/PhpExtensionCheck.html"," < Check","This check compares PHP extensions and their version",1],["PhpSettingCheck","Environaut\\Checks","Environaut\/Checks\/PhpSettingCheck.html"," < Check","This check compares PHP runtime configuration options",1],["Validator","Environaut\\Checks","Environaut\/Checks\/Validator.html","","Default validator class that may be used in checks",1],["AboutCommand","Environaut\\Command","Environaut\/Command\/AboutCommand.html"," < Command","Displays information about Environaut.",1],["CheckCommand","Environaut\\Command","Environaut\/Command\/CheckCommand.html"," < Command","Checks the environment according to the given configuration,",1],["Command","Environaut\\Command","Environaut\/Command\/Command.html"," < Command","Base class for environaut commands.",1],["BaseConfigHandler","Environaut\\Config","Environaut\/Config\/BaseConfigHandler.html","","Base class that may be used for custom config handlers.",1],["Config","Environaut\\Config","Environaut\/Config\/Config.html","","Default representation of the config file data.",1],["ConfigHandler","Environaut\\Config","Environaut\/Config\/ConfigHandler.html"," < BaseConfigHandler","Default config handler that reads a config file from",1],["IConfig","Environaut\\Config","Environaut\/Config\/IConfig.html","","Interface all Environaut configs must implement.",1],["IConfigHandler","Environaut\\Config","Environaut\/Config\/IConfigHandler.html","","Default interface all Environaut config handlers must",1],["Parameters","Environaut\\Config","Environaut\/Config\/Parameters.html","","Class that wraps an associative array for more convenient",1],["DomAttribute","Environaut\\Config\\Reader\\Dom","Environaut\/Config\/Reader\/Dom\/DomAttribute.html"," < DOMAttr","Custom \\DOMAttrib implementation with convenience methods",1],["DomDocument","Environaut\\Config\\Reader\\Dom","Environaut\/Config\/Reader\/Dom\/DomDocument.html"," < DOMDocument","Environaut DOM document implementation with convenience",1],["DomElement","Environaut\\Config\\Reader\\Dom","Environaut\/Config\/Reader\/Dom\/DomElement.html"," < DOMElement","Custom \\DOMElement implementation for Environaut to",1],["IConfigReader","Environaut\\Config\\Reader","Environaut\/Config\/Reader\/IConfigReader.html","","Interface all specific config file readers must implement.",1],["JsonConfigReader","Environaut\\Config\\Reader","Environaut\/Config\/Reader\/JsonConfigReader.html","","Reads a configuration from a JSON file that is decoded",1],["PhpConfigReader","Environaut\\Config\\Reader","Environaut\/Config\/Reader\/PhpConfigReader.html","","Reads a configuration from a PHP file that returns",1],["XmlConfigReader","Environaut\\Config\\Reader","Environaut\/Config\/Reader\/XmlConfigReader.html","","Reads configuration data from XML formatters.",1],["Export","Environaut\\Export","Environaut\/Export\/Export.html","","Default export that is used for reports after checks",1],["BaseFormatter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/BaseFormatter.html","","Simple formatter that takes messages from the results",1],["ConsoleMessageFormatter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/ConsoleMessageFormatter.html"," < BaseFormatter","Simple formatter that takes messages from the results",1],["IReportFormatter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/IReportFormatter.html","","Interface that report formatters must implement.",1],["JsonSettingsWriter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/JsonSettingsWriter.html"," < BaseFormatter","Writes all or specific groups of settings as JSON to",1],["PhpSettingsWriter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/PhpSettingsWriter.html"," < BaseFormatter","Writes all or specific groups of settings as a PHP",1],["PlainTextSettingsWriter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/PlainTextSettingsWriter.html"," < BaseFormatter","",1],["ShellSettingsWriter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/ShellSettingsWriter.html"," < BaseFormatter","Writes all or specific groups of settings as SHELL",1],["XmlSettingsWriter","Environaut\\Export\\Formatter","Environaut\/Export\/Formatter\/XmlSettingsWriter.html"," < BaseFormatter","Writes all or specific groups of settings as XML to",1],["IExport","Environaut\\Export","Environaut\/Export\/IExport.html","","Interface all report exporters must implement.",1],["PharCompiler","Environaut","Environaut\/PharCompiler.html","","This class compiles all necessary files of Environaut",1],["IReport","Environaut\\Report","Environaut\/Report\/IReport.html","","Interface all reports must implement.",1],["Report","Environaut\\Report","Environaut\/Report\/Report.html","","Default class that holds results from checks.",1],["IResult","Environaut\\Report\\Results","Environaut\/Report\/Results\/IResult.html","","Interface that check results must implement.",1],["IMessage","Environaut\\Report\\Results\\Messages","Environaut\/Report\/Results\/Messages\/IMessage.html","","",1],["Message","Environaut\\Report\\Results\\Messages","Environaut\/Report\/Results\/Messages\/Message.html","","A message may be emitted by checks to be presented",1],["Result","Environaut\\Report\\Results","Environaut\/Report\/Results\/Result.html","","Result that checks provide for a report.",1],["ISetting","Environaut\\Report\\Results\\Settings","Environaut\/Report\/Results\/Settings\/ISetting.html","","Interface that defines settings.",1],["Setting","Environaut\\Report\\Results\\Settings","Environaut\/Report\/Results\/Settings\/Setting.html","","Simple value holder with a name as key and a group",1],["IRunner","Environaut\\Runner","Environaut\/Runner\/IRunner.html","","Interface all check running instances must implement.",1],["Runner","Environaut\\Runner","Environaut\/Runner\/Runner.html","","Reads checks from the config, executes them in that",1],["Application::__construct","Environaut\\Application","Environaut\/Application.html#method___construct","($version)","",2],["Application::doRun","Environaut\\Application","Environaut\/Application.html#method_doRun","(<abbr title=\"Symfony\\Component\\Console\\Input\\InputInterface\">InputInterface<\/abbr> $input, <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","{@inheritDoc}",2],["Cache::add","Environaut\\Cache\\Cache","Environaut\/Cache\/Cache.html#method_add","(<a href=\"Environaut\/Report\/Results\/Settings\/ISetting.html\"><abbr title=\"Environaut\\Report\\Results\\Settings\\ISetting\">ISetting<\/abbr><\/a> $setting)","",2],["Cache::addAll","Environaut\\Cache\\Cache","Environaut\/Cache\/Cache.html#method_addAll","(array $settings)","",2],["Cache::save","Environaut\\Cache\\Cache","Environaut\/Cache\/Cache.html#method_save","()","",2],["Cache::setLocation","Environaut\\Cache\\Cache","Environaut\/Cache\/Cache.html#method_setLocation","(string $location)","Sets the given location as the cache location to use.",2],["ICache::add","Environaut\\Cache\\ICache","Environaut\/Cache\/ICache.html#method_add","(<a href=\"Environaut\/Report\/Results\/Settings\/ISetting.html\"><abbr title=\"Environaut\\Report\\Results\\Settings\\ISetting\">ISetting<\/abbr><\/a> $setting)","",2],["ICache::addAll","Environaut\\Cache\\ICache","Environaut\/Cache\/ICache.html#method_addAll","(array $settings)","",2],["ICache::save","Environaut\\Cache\\ICache","Environaut\/Cache\/ICache.html#method_save","()","",2],["IReadOnlyCache::setLocation","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_setLocation","(string $location)","Sets the given location as the cache location to use.",2],["IReadOnlyCache::getLocation","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_getLocation","()","Returns the location currently set on the cache.",2],["IReadOnlyCache::setParameters","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Runtime parameters to configure the cache operations.",2],["IReadOnlyCache::load","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_load","()","Loads the settings from the configured or default location.",2],["IReadOnlyCache::get","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_get","(string $name, mixed $groups = null, integer $flag = null)","Returns the first setting from the loaded cache that",2],["IReadOnlyCache::has","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_has","(string $name, mixed $groups = null, integer $flag = null)","Returns whether a cached value for a setting from the",2],["IReadOnlyCache::getAll","Environaut\\Cache\\IReadOnlyCache","Environaut\/Cache\/IReadOnlyCache.html#method_getAll","(mixed $groups = null, <abbr title=\"Environaut\\Cache\\type\">type<\/abbr> $flag = null)","Returns an array of settings matching the given criterias.",2],["ReadOnlyCache::__construct","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method___construct","()","",2],["ReadOnlyCache::has","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_has","(string $name, mixed $groups = null, integer $flag = null)","Returns whether a cached value for a setting from the",2],["ReadOnlyCache::get","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_get","(string $name, mixed $groups = null, integer $flag = null)","Returns the first setting from the loaded cache that",2],["ReadOnlyCache::getAll","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_getAll","(mixed $groups = null, <abbr title=\"Environaut\\Cache\\type\">type<\/abbr> $flag = null)","Returns an array of settings matching the given criterias.",2],["ReadOnlyCache::load","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_load","()","Loads the settings from the configured or default location.",2],["ReadOnlyCache::setLocation","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_setLocation","(string $location)","Sets the given location as the cache location to use.",2],["ReadOnlyCache::getLocation","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_getLocation","()","Returns the location currently set on the cache.",2],["ReadOnlyCache::setParameters","Environaut\\Cache\\ReadOnlyCache","Environaut\/Cache\/ReadOnlyCache.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Runtime parameters to configure the cache operations.",2],["Check::__construct","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method___construct","()","Creates a new Check instance with a random name and",2],["Check::getResult","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getResult","()","Return the result of the check after it ran (consisting",2],["Check::setName","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_setName","(string $name = null)","Sets the name of the check.",2],["Check::getName","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getName","()","Returns the name of the check.",2],["Check::setGroup","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_setGroup","(string $group = null)","Sets the group name of the check (for reports).",2],["Check::getGroup","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getGroup","()","Returns the group name of the check.",2],["Check::setParameters","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Sets the necessary runtime parameters of the check.",2],["Check::getParameters","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getParameters","()","Returns the runtime parameters of the check.",2],["Check::setCache","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_setCache","(<a href=\"Environaut\/Cache\/IReadOnlyCache.html\"><abbr title=\"Environaut\\Cache\\IReadOnlyCache\">IReadOnlyCache<\/abbr><\/a> $cache)","Sets the cache instance a check may use to retrieve",2],["Check::getDependencies","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getDependencies","()","Return dependencies that must be fulfilled for this",2],["Check::getDefaultGroupName","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["Check::getDefaultSettingGroupName","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getDefaultSettingGroupName","()","Returns the default group name this check uses for",2],["Check::getDialogHelper","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getDialogHelper","()","",2],["Check::getOutputStream","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getOutputStream","()","",2],["Check::setCommand","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_setCommand","(<a href=\"Environaut\/Command\/Command.html\"><abbr title=\"Environaut\\Command\\Command\">Command<\/abbr><\/a> $command)","",2],["Check::getCommand","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getCommand","()","",2],["Check::getRandomString","Environaut\\Checks\\Check","Environaut\/Checks\/Check.html#method_getRandomString","(int $length = 8, string $prefix = &#039;check_&#039;)","Returns a random string with the specified length and",2],["ComposerSecurityCheck::getDefaultGroupName","Environaut\\Checks\\ComposerSecurityCheck","Environaut\/Checks\/ComposerSecurityCheck.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["ComposerSecurityCheck::run","Environaut\\Checks\\ComposerSecurityCheck","Environaut\/Checks\/ComposerSecurityCheck.html#method_run","()","Execute the check and add messages and settings to",2],["Configurator::getDefaultGroupName","Environaut\\Checks\\Configurator","Environaut\/Checks\/Configurator.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["Configurator::getDefaultSettingGroupName","Environaut\\Checks\\Configurator","Environaut\/Checks\/Configurator.html#method_getDefaultSettingGroupName","()","Returns the default group name this check uses for",2],["Configurator::run","Environaut\\Checks\\Configurator","Environaut\/Checks\/Configurator.html#method_run","()","Execute the check and add messages and settings to",2],["ExecutableCheck::getDefaultGroupName","Environaut\\Checks\\ExecutableCheck","Environaut\/Checks\/ExecutableCheck.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["ExecutableCheck::getDefaultSettingGroupName","Environaut\\Checks\\ExecutableCheck","Environaut\/Checks\/ExecutableCheck.html#method_getDefaultSettingGroupName","()","Returns the default group name this check uses for",2],["ExecutableCheck::run","Environaut\\Checks\\ExecutableCheck","Environaut\/Checks\/ExecutableCheck.html#method_run","()","Execute the check and add messages and settings to",2],["ExecutableCheck::validExecutable","Environaut\\Checks\\ExecutableCheck","Environaut\/Checks\/ExecutableCheck.html#method_validExecutable","(string $value)","Checks whether the given input value leads to an executable",2],["ICheck::getName","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getName","()","Returns the name of the check.",2],["ICheck::setName","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_setName","(string $name)","Sets the name of the check.",2],["ICheck::getGroup","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getGroup","()","Returns the group name of the check.",2],["ICheck::setGroup","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_setGroup","(string $group)","Sets the group name of the check (for reports).",2],["ICheck::getParameters","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getParameters","()","Returns the runtime parameters of the check.",2],["ICheck::setParameters","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Sets the necessary runtime parameters of the check.",2],["ICheck::getDefaultGroupName","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["ICheck::getDefaultSettingGroupName","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getDefaultSettingGroupName","()","Returns the default group name this check uses for",2],["ICheck::run","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_run","()","Execute the check and add messages and settings to",2],["ICheck::getResult","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getResult","()","Return the result of the check after it ran (consisting",2],["ICheck::getDependencies","Environaut\\Checks\\ICheck","Environaut\/Checks\/ICheck.html#method_getDependencies","()","Return dependencies that must be fulfilled for this",2],["INestableCheck::addChild","Environaut\\Checks\\INestableCheck","Environaut\/Checks\/INestableCheck.html#method_addChild","(<a href=\"Environaut\/Checks\/ICheck.html\"><abbr title=\"Environaut\\Checks\\ICheck\">ICheck<\/abbr><\/a> $check)","",2],["INestableCheck::getChild","Environaut\\Checks\\INestableCheck","Environaut\/Checks\/INestableCheck.html#method_getChild","($name)","",2],["INestableCheck::getChildren","Environaut\\Checks\\INestableCheck","Environaut\/Checks\/INestableCheck.html#method_getChildren","($name)","",2],["MbInternalEncodingCheck::getDefaultGroupName","Environaut\\Checks\\MbInternalEncodingCheck","Environaut\/Checks\/MbInternalEncodingCheck.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["MbInternalEncodingCheck::run","Environaut\\Checks\\MbInternalEncodingCheck","Environaut\/Checks\/MbInternalEncodingCheck.html#method_run","()","Execute the check and add messages and settings to",2],["PhpExtensionCheck::getDefaultGroupName","Environaut\\Checks\\PhpExtensionCheck","Environaut\/Checks\/PhpExtensionCheck.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["PhpExtensionCheck::run","Environaut\\Checks\\PhpExtensionCheck","Environaut\/Checks\/PhpExtensionCheck.html#method_run","()","Execute the check and add messages and settings to",2],["PhpSettingCheck::getDefaultGroupName","Environaut\\Checks\\PhpSettingCheck","Environaut\/Checks\/PhpSettingCheck.html#method_getDefaultGroupName","()","Returns the default group name this check uses when",2],["PhpSettingCheck::run","Environaut\\Checks\\PhpSettingCheck","Environaut\/Checks\/PhpSettingCheck.html#method_run","()","Execute the check and add messages and settings to",2],["PhpSettingCheck::getSupportedComparisons","Environaut\\Checks\\PhpSettingCheck","Environaut\/Checks\/PhpSettingCheck.html#method_getSupportedComparisons","()","Returns the supported comparison names that may be",2],["PhpSettingCheck::compareIntegers","Environaut\\Checks\\PhpSettingCheck","Environaut\/Checks\/PhpSettingCheck.html#method_compareIntegers","(string $value, string $setting_value)","Compares the given values according to the comparison",2],["PhpSettingCheck::getOperator","Environaut\\Checks\\PhpSettingCheck","Environaut\/Checks\/PhpSettingCheck.html#method_getOperator","(string $value)","Returns the comparison operator part of the given value.",2],["PhpSettingCheck::getIntegerValue","Environaut\\Checks\\PhpSettingCheck","Environaut\/Checks\/PhpSettingCheck.html#method_getIntegerValue","(mixed $value)","Returns the integer value of the given value.",2],["Validator::readableDirectory","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_readableDirectory","(string $value)","Validates the given path and throws an exception if",2],["Validator::writableDirectory","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_writableDirectory","(string $value)","Validates the given path and throws an exception if",2],["Validator::writableFile","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_writableFile","(string $value)","Validates the given file path and throws an exception",2],["Validator::readableFile","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_readableFile","(string $value)","Validates the given file path and throws an exception",2],["Validator::validUrl","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_validUrl","(string $value)","Validates the given URL and throws an exception if",2],["Validator::validEmail","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_validEmail","(string $value)","Validates the given value using the PHP filter_var",2],["Validator::validIp","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_validIp","(string $value)","Validates the given value using the PHP filter_var",2],["Validator::validIpv4","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_validIpv4","(string $value)","Validates the given value using the PHP filter_var",2],["Validator::validIpv4NotReserved","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_validIpv4NotReserved","(string $value)","Validates the given value using the PHP filter_var",2],["Validator::validIpv6","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_validIpv6","(string $value)","Validates the given value using the PHP filter_var",2],["Validator::fixRelativePath","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_fixRelativePath","($path_with_dots)","Resolves dots and double slashes in relative paths",2],["Validator::fixPath","Environaut\\Checks\\Validator","Environaut\/Checks\/Validator.html#method_fixPath","(string $path)","Appends '\/' to the path if necessary.",2],["CheckCommand::getConfigHandler","Environaut\\Command\\CheckCommand","Environaut\/Command\/CheckCommand.html#method_getConfigHandler","()","",2],["CheckCommand::getConfigPath","Environaut\\Command\\CheckCommand","Environaut\/Command\/CheckCommand.html#method_getConfigPath","()","",2],["Command::getOutput","Environaut\\Command\\Command","Environaut\/Command\/Command.html#method_getOutput","()","",2],["Command::getInput","Environaut\\Command\\Command","Environaut\/Command\/Command.html#method_getInput","()","",2],["Command::getDialogHelper","Environaut\\Command\\Command","Environaut\/Command\/Command.html#method_getDialogHelper","()","",2],["BaseConfigHandler::__construct","Environaut\\Config\\BaseConfigHandler","Environaut\/Config\/BaseConfigHandler.html#method___construct","(array $locations = array(), array $parameters = array())","Create new instance of the concrete config handler.",2],["BaseConfigHandler::getConfig","Environaut\\Config\\BaseConfigHandler","Environaut\/Config\/BaseConfigHandler.html#method_getConfig","()","Returns the currently (read and merged) config data",2],["BaseConfigHandler::addLocation","Environaut\\Config\\BaseConfigHandler","Environaut\/Config\/BaseConfigHandler.html#method_addLocation","(mixed $location)","Adds the given location to the set of locations to",2],["BaseConfigHandler::setLocations","Environaut\\Config\\BaseConfigHandler","Environaut\/Config\/BaseConfigHandler.html#method_setLocations","(array $locations)","Set the locations to check for config files.",2],["BaseConfigHandler::getLocations","Environaut\\Config\\BaseConfigHandler","Environaut\/Config\/BaseConfigHandler.html#method_getLocations","()","",2],["Config::__construct","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method___construct","(array $config_data = array())","Create new instance with some default config data.",2],["Config::getCheckDefinitions","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_getCheckDefinitions","()","",2],["Config::getExportImplementor","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_getExportImplementor","()","Defaults to \"Environaut\\Export\\Export\".",2],["Config::getReportImplementor","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_getReportImplementor","()","Defaults to \"Environaut\\Report\\Report\".",2],["Config::getRunnerImplementor","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_getRunnerImplementor","()","Defaults to \"Environaut\\Runner\\Runner\".",2],["Config::getReadOnlyCacheImplementor","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_getReadOnlyCacheImplementor","()","Defaults to \"Environaut\\Cache\\ReadOnlyCache\".",2],["Config::getCacheImplementor","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_getCacheImplementor","()","Defaults to \"Environaut\\Cache\\Cache\".",2],["Config::get","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_get","(string $key, mixed $default = null)","Returns the config value for the given key.",2],["Config::has","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_has","(string $key)","Returns whether the config key exists or nor.",2],["Config::set","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_set","(string $key, mixed $value)","Sets a given value to the config under the specified",2],["Config::toArray","Environaut\\Config\\Config","Environaut\/Config\/Config.html#method_toArray","()","Returns the config data as an associative array.",2],["IConfig::getCheckDefinitions","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_getCheckDefinitions","()","",2],["IConfig::getExportImplementor","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_getExportImplementor","()","Defaults to \"Environaut\\Export\\Export\".",2],["IConfig::getReportImplementor","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_getReportImplementor","()","Defaults to \"Environaut\\Report\\Report\".",2],["IConfig::getRunnerImplementor","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_getRunnerImplementor","()","Defaults to \"Environaut\\Runner\\Runner\".",2],["IConfig::getReadOnlyCacheImplementor","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_getReadOnlyCacheImplementor","()","Defaults to \"Environaut\\Cache\\ReadOnlyCache\".",2],["IConfig::getCacheImplementor","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_getCacheImplementor","()","Defaults to \"Environaut\\Cache\\Cache\".",2],["IConfig::get","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_get","(string $key, mixed $default = null)","Returns the config value for the given key.",2],["IConfig::has","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_has","(string $key)","Returns whether the config key exists or nor.",2],["IConfig::set","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_set","(string $key, mixed $value)","Sets a given value to the config under the specified",2],["IConfig::toArray","Environaut\\Config\\IConfig","Environaut\/Config\/IConfig.html#method_toArray","()","Returns the config data as an associative array.",2],["IConfigHandler::getConfig","Environaut\\Config\\IConfigHandler","Environaut\/Config\/IConfigHandler.html#method_getConfig","()","Returns the currently (read and merged) config data",2],["IConfigHandler::addLocation","Environaut\\Config\\IConfigHandler","Environaut\/Config\/IConfigHandler.html#method_addLocation","(mixed $location)","Adds the given location to the set of locations to",2],["IConfigHandler::setLocations","Environaut\\Config\\IConfigHandler","Environaut\/Config\/IConfigHandler.html#method_setLocations","(array $locations)","Set the locations to check for config files.",2],["IConfigHandler::getLocations","Environaut\\Config\\IConfigHandler","Environaut\/Config\/IConfigHandler.html#method_getLocations","()","",2],["Parameters::__construct","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method___construct","(array $parameters = array())","Create a new instance with the given parameters as",2],["Parameters::get","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method_get","(string $key, mixed $default = null)","Returns the value for the given key.",2],["Parameters::set","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method_set","(string $key, mixed $value)","Sets a given value for the specified key.",2],["Parameters::has","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method_has","(string $key)","Returns whether the key exists or not.",2],["Parameters::getKeys","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method_getKeys","()","Returns all first level key names.",2],["Parameters::toArray","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method_toArray","()","Returns the data as an associative array.",2],["Parameters::clear","Environaut\\Config\\Parameters","Environaut\/Config\/Parameters.html#method_clear","()","Delete all key\/value pairs.",2],["DomAttribute::__toString","Environaut\\Config\\Reader\\Dom\\DomAttribute","Environaut\/Config\/Reader\/Dom\/DomAttribute.html#method___toString","()","",2],["DomAttribute::getValue","Environaut\\Config\\Reader\\Dom\\DomAttribute","Environaut\/Config\/Reader\/Dom\/DomAttribute.html#method_getValue","()","",2],["DomDocument::__construct","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method___construct","(string $version = &#039;1.0&#039;, string $encoding = &#039;UTF-8&#039;)","Creates a new DomDocument instance.",2],["DomDocument::load","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_load","(string $filename, int $options)","Loads XML from a file and registers the Environaut",2],["DomDocument::loadXml","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_loadXml","(string $source, int $options)","Loads XML from a string and registers the Environaut",2],["DomDocument::schemaValidate","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_schemaValidate","(string $filename)","Validates the current document according to the given",2],["DomDocument::schemaValidateSource","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_schemaValidateSource","(string $source)","Validates the current document according to the given",2],["DomDocument::xinclude","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_xinclude","(int $options)","Substitutes XIncludes present in the current document.",2],["DomDocument::getXpath","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_getXpath","()","Returns the xpath instance that handles this document.",2],["DomDocument::getElementValue","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_getElementValue","(string $element_name, <a href=\"http:\/\/php.net\/DomElement\"><abbr title=\"DomElement\">DomElement<\/abbr><\/a> $reference_element = null)","Returns the nodeValue of the child element with the",2],["DomDocument::getElement","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_getElement","(string $name)","Returns the DomElement with the given name.",2],["DomDocument::setDefaultNamespace","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_setDefaultNamespace","(string $prefix = self::NAMESPACE_PREFIX, string $uri = self::NAMESPACE_ENVIRONAUT_1_0)","Set the default namespace that should be used when",2],["DomDocument::getDefaultNamespaceUri","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_getDefaultNamespaceUri","()","Returns the default namespace URI used by Environaut.",2],["DomDocument::getDefaultNamespacePrefix","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_getDefaultNamespacePrefix","()","Returns the default namespace prefix used by Environaut",2],["DomDocument::isEnvironautDocument","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_isEnvironautDocument","()","Returns whether the current document is an Environaut",2],["DomDocument::registerEnvironautNamespace","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_registerEnvironautNamespace","(<abbr title=\"Environaut\\Config\\Reader\\Dom\\DOMDocument\">DOMDocument<\/abbr> $doc)","Registers the default Environaut namespace on the internal",2],["DomDocument::isEnvironautConfigurationDocument","Environaut\\Config\\Reader\\Dom\\DomDocument","Environaut\/Config\/Reader\/Dom\/DomDocument.html#method_isEnvironautConfigurationDocument","(<abbr title=\"Environaut\\Config\\Reader\\Dom\\DOMDocument\">DOMDocument<\/abbr> $doc)","Returns whether the given document instance is an Environaut",2],["DomElement::__toString","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method___toString","()","Returns the nodeValue of the element.",2],["DomElement::getName","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getName","()","Returns the nodeName of the element.",2],["DomElement::getValue","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getValue","()","Returns the nodeValue of the element.",2],["DomElement::getIterator","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getIterator","()","Returns a \\DOMNodeList of all child elements of the",2],["DomElement::getChildNodes","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getChildNodes","()","Returns a \\DOMNodeList of all child elements of the",2],["DomElement::getAttributeValue","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getAttributeValue","(string $name, mixed $default_value = null)","Returns the value of the given attribute or returns",2],["DomElement::getAttributes","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getAttributes","()","Returns all attributes including their values for the",2],["DomElement::get","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_get","(string $name)","Returns all child elements of the given name or all",2],["DomElement::has","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_has","(string $name)","Determines whether there are children of the element",2],["DomElement::hasChild","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_hasChild","(string $name)","Determines whether there's at least one child node",2],["DomElement::getChild","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getChild","(string $name)","Returns first child of the element with the given name.",2],["DomElement::hasChildren","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_hasChildren","(string $name)","Determines whether there are children of the element",2],["DomElement::countChildren","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_countChildren","(string $name)","Returns the count of the children with the given name.",2],["DomElement::getChildren","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getChildren","(string $name)","Returns all child elements of the given name.",2],["DomElement::hasParameters","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_hasParameters","()","Determine whether there's a 'parameters' element as",2],["DomElement::getParameters","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_getParameters","(array $default = array(), boolean $literalize = true)","Returns all (nested) parameters of the element as an",2],["DomElement::literalize","Environaut\\Config\\Reader\\Dom\\DomElement","Environaut\/Config\/Reader\/Dom\/DomElement.html#method_literalize","(mixed $value)","Returns the literalized value, that is: - 'on|yes|true'",2],["IConfigReader::getConfigData","Environaut\\Config\\Reader\\IConfigReader","Environaut\/Config\/Reader\/IConfigReader.html#method_getConfigData","(mixed $location)","Reads the config from the given location and returns",2],["JsonConfigReader::getConfigData","Environaut\\Config\\Reader\\JsonConfigReader","Environaut\/Config\/Reader\/JsonConfigReader.html#method_getConfigData","(mixed $location)","Reads the config from the given location and returns",2],["PhpConfigReader::getConfigData","Environaut\\Config\\Reader\\PhpConfigReader","Environaut\/Config\/Reader\/PhpConfigReader.html#method_getConfigData","(mixed $location)","Reads the config from the given location and returns",2],["XmlConfigReader::getConfigData","Environaut\\Config\\Reader\\XmlConfigReader","Environaut\/Config\/Reader\/XmlConfigReader.html#method_getConfigData","(mixed $location)","Reads the config from the given location and returns",2],["XmlConfigReader::getDocument","Environaut\\Config\\Reader\\XmlConfigReader","Environaut\/Config\/Reader\/XmlConfigReader.html#method_getDocument","()","Returns the DomDocument instance that was used for",2],["Export::run","Environaut\\Export\\Export","Environaut\/Export\/Export.html#method_run","()","Starts the exporter.",2],["Export::setReport","Environaut\\Export\\Export","Environaut\/Export\/Export.html#method_setReport","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","Set report to be handled by this exporter.",2],["Export::setCommand","Environaut\\Export\\Export","Environaut\/Export\/Export.html#method_setCommand","(<a href=\"Environaut\/Command\/Command.html\"><abbr title=\"Environaut\\Command\\Command\">Command<\/abbr><\/a> $command)","Environaut command for access to input and output.",2],["Export::setParameters","Environaut\\Export\\Export","Environaut\/Export\/Export.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Runtime parameters to configure the export operations.",2],["BaseFormatter::__construct","Environaut\\Export\\Formatter\\BaseFormatter","Environaut\/Export\/Formatter\/BaseFormatter.html#method___construct","(array $options = array())","Create new instance of the formatter.",2],["BaseFormatter::setParameters","Environaut\\Export\\Formatter\\BaseFormatter","Environaut\/Export\/Formatter\/BaseFormatter.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Sets the given runtime parameters on the formatter.",2],["BaseFormatter::getParameters","Environaut\\Export\\Formatter\\BaseFormatter","Environaut\/Export\/Formatter\/BaseFormatter.html#method_getParameters","()","Returns all runtime parameters for this formatter from",2],["BaseFormatter::vksprintf","Environaut\\Export\\Formatter\\BaseFormatter","Environaut\/Export\/Formatter\/BaseFormatter.html#method_vksprintf","(string $format, array $args)","Like vsprintf, but accepts keys instead of an order",2],["ConsoleMessageFormatter::format","Environaut\\Export\\Formatter\\ConsoleMessageFormatter","Environaut\/Export\/Formatter\/ConsoleMessageFormatter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["IReportFormatter::format","Environaut\\Export\\Formatter\\IReportFormatter","Environaut\/Export\/Formatter\/IReportFormatter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["IReportFormatter::setParameters","Environaut\\Export\\Formatter\\IReportFormatter","Environaut\/Export\/Formatter\/IReportFormatter.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Sets the given runtime parameters on the formatter.",2],["JsonSettingsWriter::format","Environaut\\Export\\Formatter\\JsonSettingsWriter","Environaut\/Export\/Formatter\/JsonSettingsWriter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["PhpSettingsWriter::format","Environaut\\Export\\Formatter\\PhpSettingsWriter","Environaut\/Export\/Formatter\/PhpSettingsWriter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["PlainTextSettingsWriter::format","Environaut\\Export\\Formatter\\PlainTextSettingsWriter","Environaut\/Export\/Formatter\/PlainTextSettingsWriter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["ShellSettingsWriter::format","Environaut\\Export\\Formatter\\ShellSettingsWriter","Environaut\/Export\/Formatter\/ShellSettingsWriter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["XmlSettingsWriter::format","Environaut\\Export\\Formatter\\XmlSettingsWriter","Environaut\/Export\/Formatter\/XmlSettingsWriter.html#method_format","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","This method takes the given report and then does something",2],["IExport::setReport","Environaut\\Export\\IExport","Environaut\/Export\/IExport.html#method_setReport","(<a href=\"Environaut\/Report\/IReport.html\"><abbr title=\"Environaut\\Report\\IReport\">IReport<\/abbr><\/a> $report)","Set report to be handled by this exporter.",2],["IExport::setCommand","Environaut\\Export\\IExport","Environaut\/Export\/IExport.html#method_setCommand","(<a href=\"Environaut\/Command\/Command.html\"><abbr title=\"Environaut\\Command\\Command\">Command<\/abbr><\/a> $command)","Environaut command for access to input and output.",2],["IExport::setParameters","Environaut\\Export\\IExport","Environaut\/Export\/IExport.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Runtime parameters to configure the export operations.",2],["IExport::run","Environaut\\Export\\IExport","Environaut\/Export\/IExport.html#method_run","()","Starts the exporter.",2],["PharCompiler::create","Environaut\\PharCompiler","Environaut\/PharCompiler.html#method_create","(string $phar_path = &#039;environaut.phar&#039;)","Creates a PHP archive file with all files necessary",2],["IReport::addResult","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_addResult","(<a href=\"Environaut\/Report\/Results\/IResult.html\"><abbr title=\"Environaut\\Report\\Results\\IResult\">IResult<\/abbr><\/a> $result)","Adds the specified result to the report.",2],["IReport::setParameters","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Runtime parameters to configure the report behaviour.",2],["IReport::setResults","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_setResults","(array $results)","Sets the given results on this report.",2],["IReport::getResults","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_getResults","()","Returns all results currently compiled for the report.",2],["IReport::getSettings","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_getSettings","(mixed $groups = null, integer $flag = null)","Returns an array of ISetting instances that match the",2],["IReport::getSettingsAsArray","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_getSettingsAsArray","(mixed $groups = null, integer $flag = null)","Returns an array of associative arrays for each ISetting",2],["IReport::getCachableSettings","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_getCachableSettings","(mixed $groups = null, integer $flag = null)","Returns an array of cachable ISetting instances that",2],["IReport::getCachableSettingsAsArray","Environaut\\Report\\IReport","Environaut\/Report\/IReport.html#method_getCachableSettingsAsArray","(mixed $groups = null, integer $flag = null)","Returns an array of associative arrays for each cachable",2],["Report::__construct","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method___construct","(array $results = array(), array $parameters = array())","Creates a new Report instance.",2],["Report::addResult","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_addResult","(<a href=\"Environaut\/Report\/Results\/IResult.html\"><abbr title=\"Environaut\\Report\\Results\\IResult\">IResult<\/abbr><\/a> $result)","Adds the specified result to the report.",2],["Report::setResults","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_setResults","(array $results)","Sets the given results on this report.",2],["Report::getResults","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_getResults","()","Returns all results currently compiled for the report.",2],["Report::getSettings","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_getSettings","(mixed $groups = null, integer $flag = null)","Returns an array of ISetting instances that match the",2],["Report::getCachableSettings","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_getCachableSettings","(mixed $groups = null, integer $flag = null)","Returns an array of cachable ISetting instances that",2],["Report::getSettingsAsArray","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_getSettingsAsArray","(mixed $groups = null, integer $flag = null)","Returns an array of associative arrays for each ISetting",2],["Report::getCachableSettingsAsArray","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_getCachableSettingsAsArray","(mixed $groups = null, integer $flag = null)","Returns an array of associative arrays for each cachable",2],["Report::setParameters","Environaut\\Report\\Report","Environaut\/Report\/Report.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Runtime parameters to configure the report behaviour.",2],["IResult::addMessage","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_addMessage","(<a href=\"Environaut\/Report\/Results\/Messages\/IMessage.html\"><abbr title=\"Environaut\\Report\\Results\\Messages\\IMessage\">IMessage<\/abbr><\/a> $message)","Adds the given message to the internal list of messages.",2],["IResult::getMessages","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getMessages","()","Returns the internal list of messages emitted by the",2],["IResult::setMessages","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_setMessages","(array $messages)","Replaces the internal list of messages with the given",2],["IResult::addSetting","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_addSetting","(<a href=\"Environaut\/Report\/Results\/Settings\/ISetting.html\"><abbr title=\"Environaut\\Report\\Results\\Settings\\ISetting\">ISetting<\/abbr><\/a> $setting, bool $cachable = true)","Adds the given setting to the internal list of settings.",2],["IResult::addSettings","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_addSettings","(array $setting, bool $cachable = true)","Adds the given setting to the internal list of settings.",2],["IResult::getSettings","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getSettings","()","Returns the internal list of settings emitted by the",2],["IResult::getCachableSettings","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getCachableSettings","()","Returns the internal list of cachable settings emitted",2],["IResult::getSettingsAsArray","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getSettingsAsArray","(string $group = null)","Return all settings or the settings of the specified",2],["IResult::getCachableSettingsAsArray","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getCachableSettingsAsArray","(string $group = null)","Return all cachable settings or the cachable settings",2],["IResult::setStatus","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_setStatus","(string $status = self::INVALID)","Sets the status of the current result (which may be",2],["IResult::getStatus","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getStatus","()","Returns the current status of this result (usually",2],["IResult::setCheck","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_setCheck","(<a href=\"Environaut\/Checks\/ICheck.html\"><abbr title=\"Environaut\\Checks\\ICheck\">ICheck<\/abbr><\/a> $check)","Sets the check instance this result belongs to.",2],["IResult::getCheck","Environaut\\Report\\Results\\IResult","Environaut\/Report\/Results\/IResult.html#method_getCheck","()","Returns the check instance this result belongs to.",2],["IMessage::getGroup","Environaut\\Report\\Results\\Messages\\IMessage","Environaut\/Report\/Results\/Messages\/IMessage.html#method_getGroup","()","",2],["IMessage::getName","Environaut\\Report\\Results\\Messages\\IMessage","Environaut\/Report\/Results\/Messages\/IMessage.html#method_getName","()","",2],["IMessage::getSeverity","Environaut\\Report\\Results\\Messages\\IMessage","Environaut\/Report\/Results\/Messages\/IMessage.html#method_getSeverity","()","",2],["IMessage::getText","Environaut\\Report\\Results\\Messages\\IMessage","Environaut\/Report\/Results\/Messages\/IMessage.html#method_getText","()","",2],["Message::__construct","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method___construct","($name = &#039;&#039;, $text = &#039;&#039;, $group = null, $severity = IMessage::SEVERITY_INFO)","",2],["Message::getGroup","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_getGroup","()","",2],["Message::setGroup","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_setGroup","($group)","",2],["Message::getName","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_getName","()","",2],["Message::setName","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_setName","($name)","",2],["Message::getText","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_getText","()","",2],["Message::setText","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_setText","($text)","",2],["Message::getSeverity","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_getSeverity","()","",2],["Message::setSeverity","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_setSeverity","($severity)","",2],["Message::toArray","Environaut\\Report\\Results\\Messages\\Message","Environaut\/Report\/Results\/Messages\/Message.html#method_toArray","()","",2],["Result::__construct","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method___construct","()","Create a new Result instance.",2],["Result::addMessage","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_addMessage","(<a href=\"Environaut\/Report\/Results\/Messages\/IMessage.html\"><abbr title=\"Environaut\\Report\\Results\\Messages\\IMessage\">IMessage<\/abbr><\/a> $message)","Adds the given message to the internal list of messages.",2],["Result::addSetting","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_addSetting","(<a href=\"Environaut\/Report\/Results\/Settings\/ISetting.html\"><abbr title=\"Environaut\\Report\\Results\\Settings\\ISetting\">ISetting<\/abbr><\/a> $setting, bool $cachable = true)","Adds the given setting to the internal list of settings.",2],["Result::addSettings","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_addSettings","(array $settings, bool $cachable = true)","Adds the given setting to the internal list of settings.",2],["Result::setMessages","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_setMessages","(array $messages)","Replaces the internal list of messages with the given",2],["Result::getMessages","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getMessages","()","Returns the internal list of messages emitted by the",2],["Result::getSettings","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getSettings","(string $groups = null, integer $flag = null)","Returns the internal list of settings emitted by the",2],["Result::getCachableSettings","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getCachableSettings","(string $groups = null, integer $flag = null)","Returns the internal list of cachable settings emitted",2],["Result::getSettingsAsArray","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getSettingsAsArray","(string $groups = null, integer $flag = null)","Return all settings or the settings of the specified",2],["Result::getCachableSettingsAsArray","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getCachableSettingsAsArray","(string $groups = null, integer $flag = null)","Return all cachable settings or the cachable settings",2],["Result::setStatus","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_setStatus","(string $status = self::INVALID)","Sets the status of the current result (which may be",2],["Result::getStatus","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getStatus","()","Returns the current status of this result (usually",2],["Result::setCheck","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_setCheck","(<a href=\"Environaut\/Checks\/ICheck.html\"><abbr title=\"Environaut\\Checks\\ICheck\">ICheck<\/abbr><\/a> $check)","Sets the check instance this result belongs to.",2],["Result::getCheck","Environaut\\Report\\Results\\Result","Environaut\/Report\/Results\/Result.html#method_getCheck","()","Returns the check instance this result belongs to.",2],["ISetting::getName","Environaut\\Report\\Results\\Settings\\ISetting","Environaut\/Report\/Results\/Settings\/ISetting.html#method_getName","()","Returns the name of the setting (that is, a key for",2],["ISetting::getValue","Environaut\\Report\\Results\\Settings\\ISetting","Environaut\/Report\/Results\/Settings\/ISetting.html#method_getValue","()","Returns the value of the setting.",2],["ISetting::getGroup","Environaut\\Report\\Results\\Settings\\ISetting","Environaut\/Report\/Results\/Settings\/ISetting.html#method_getGroup","()","Returns the group name of this setting that may be",2],["ISetting::toArray","Environaut\\Report\\Results\\Settings\\ISetting","Environaut\/Report\/Results\/Settings\/ISetting.html#method_toArray","()","Returns an associative array with the group containing",2],["Setting::__construct","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method___construct","($name, $value, $group = ICheck::DEFAULT_GROUP_NAME, $flag = ISetting::NORMAL)","Create a new setting instance.",2],["Setting::getName","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_getName","()","Returns the name of the setting (that is, a key for",2],["Setting::getValue","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_getValue","()","Returns the value of the setting.",2],["Setting::getGroup","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_getGroup","()","Returns the group name of this setting that may be",2],["Setting::getFlag","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_getFlag","()","Returns the type of setting.",2],["Setting::matchesFlag","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_matchesFlag","(int $flag = null)","Determines whether this setting's flag value is contained",2],["Setting::matchesGroup","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_matchesGroup","(mixed $groups = null)","Determines whether this setting's group matches the",2],["Setting::toArray","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_toArray","()","Returns an associative array with the group containing",2],["Setting::getGroupNames","Environaut\\Report\\Results\\Settings\\Setting","Environaut\/Report\/Results\/Settings\/Setting.html#method_getGroupNames","(mixed $groups = null)","",2],["IRunner::setCache","Environaut\\Runner\\IRunner","Environaut\/Runner\/IRunner.html#method_setCache","(<a href=\"Environaut\/Cache\/IReadOnlyCache.html\"><abbr title=\"Environaut\\Cache\\IReadOnlyCache\">IReadOnlyCache<\/abbr><\/a> $cache)","Sets the readonly cache used by checks to determine",2],["IRunner::setConfig","Environaut\\Runner\\IRunner","Environaut\/Runner\/IRunner.html#method_setConfig","(<a href=\"Environaut\/Config\/IConfig.html\"><abbr title=\"Environaut\\Config\\IConfig\">IConfig<\/abbr><\/a> $config)","Sets the given config on the runner.",2],["IRunner::setCommand","Environaut\\Runner\\IRunner","Environaut\/Runner\/IRunner.html#method_setCommand","(<a href=\"Environaut\/Command\/Command.html\"><abbr title=\"Environaut\\Command\\Command\">Command<\/abbr><\/a> $command)","Sets the command on the runner to have access to the",2],["IRunner::setParameters","Environaut\\Runner\\IRunner","Environaut\/Runner\/IRunner.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Sets the given runtime parameter on the runner.",2],["IRunner::run","Environaut\\Runner\\IRunner","Environaut\/Runner\/IRunner.html#method_run","()","Execute the checks that are defined in the config and",2],["IRunner::getReport","Environaut\\Runner\\IRunner","Environaut\/Runner\/IRunner.html#method_getReport","()","",2],["Runner::__construct","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method___construct","()","",2],["Runner::run","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method_run","()","Execute the checks that are defined in the config and",2],["Runner::getReport","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method_getReport","()","",2],["Runner::setParameters","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method_setParameters","(<a href=\"Environaut\/Config\/Parameters.html\"><abbr title=\"Environaut\\Config\\Parameters\">Parameters<\/abbr><\/a> $parameters)","Sets the given runtime parameter on the runner.",2],["Runner::setConfig","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method_setConfig","(<a href=\"Environaut\/Config\/IConfig.html\"><abbr title=\"Environaut\\Config\\IConfig\">IConfig<\/abbr><\/a> $config)","Sets the given config on the runner.",2],["Runner::setCache","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method_setCache","(<a href=\"Environaut\/Cache\/IReadOnlyCache.html\"><abbr title=\"Environaut\\Cache\\IReadOnlyCache\">IReadOnlyCache<\/abbr><\/a> $cache)","Sets the readonly cache used by checks to determine",2],["Runner::setCommand","Environaut\\Runner\\Runner","Environaut\/Runner\/Runner.html#method_setCommand","(<a href=\"Environaut\/Command\/Command.html\"><abbr title=\"Environaut\\Command\\Command\">Command<\/abbr><\/a> $command)","Sets the command on the runner to have access to the",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']